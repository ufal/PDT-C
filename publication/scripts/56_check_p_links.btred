#!btred -TN --context PML_En_A -e check_p_links()
#-*- cperl -*-
# Author: Jiri Mirovsky
# 2020

#ifndef NTRED
#include <tred.mac>
#endif

=item check_p_links

A check if all p-links (terminal.rf, nonterminals.rf) lead to existing nodes

=cut

package PML_En_A;

use strict;
use warnings;

#encoding utf8
use utf8;
binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

my %pids;

open(PIDS, '<', "56_check_p_links_p-ids.txt") or die $!;
foreach my $pid (<PIDS>) {
  chomp($pid);
  $pids{$pid} = 1;
}
close(PIDS);

sub check_p_links {

  my $id = $this->attr('id');
  my $file = FileName();

  # print "$id\n";

  # this does not work:   my @pnodes = PML_En_A::GetPNodes($this);

  my $terminal_ref = $this->attr('p/terminal.rf') // '';
  $terminal_ref =~ s/^p#//;
  if ($terminal_ref and !refexists($terminal_ref)) {
    print STDERR "Non-existing terminal reference: $terminal_ref at $id in $file!\n";
  }
  my @nonterminal_refs = ListV($this->attr('p/nonterminals.rf'));
  foreach my $nonterminal_ref (@nonterminal_refs) {
    $nonterminal_ref =~ s/^p#//;
    if ($nonterminal_ref and !refexists($nonterminal_ref)) {
      print STDERR "Non-existing non-terminal reference: $nonterminal_ref at $id in $file!\n";
    }
  }

} # check_p_links

sub refexists {
  my ($ref) = @_;
  if ($pids{$ref}) {
    return 1;
  }
  return 0;
}
