SHELL=/bin/bash

BASE_DIR:=$(PWD)

TREEX=PERL5LIB=${BASE_DIR}/lib:${PERL5LIB} treex
LRC=0
ifeq ($(LRC), 1)
LRC_FLAG=-p --jobs=100 --workdir='${BASE_DIR}/tmp/treex_runs/{NNN}-run.{XXXX}' --qsub "-v PERL5LIB=${BASE_DIR}/lib"
#LRC_FLAG=-p --jobs=100 --qsub "-v PERL5LIB=${BASE_DIR}/lib"
TREEX_NOLRC:=$(TREEX)
TREEX:=$(TREEX) $(LRC_FLAG)
endif


TMP_DIR=tmp

##################################################################################################################################
############################## RETRIEVE THE SCHEMA FILES FOR PDT-LIKE PARTS OF THE NEW PCEDT #####################################
##################################################################################################################################

ORIG_SCHEMA_DIR=PDT-C/resources
SCHEMA_DIR=$(TMP_DIR)/schema

$(SCHEMA_DIR) :
	mkdir $@
	cp PDT-C/resources/tdata_c_schema.xml $@ 
	cp PDT-C/resources/adata_c_schema.xml $@
	cp PDT-C/resources/mdata_c_schema.xml $@
	cp PDT-C/resources/wdata_c_schema.xml $@
	cp ${TMT_ROOT}/treex/lib/Treex/Block/Read/PDT_schema/pdata_eng_schema.xml $@
	cat /net/work/projects/pcedt-coref/lrec_2016/orig_data/schema/tdata_eng_schema.xml | \
		sed 's/target-node\.rf/target_node.rf/g' | \
		sed 's/informal-type/type/g' > $@/tdata_eng_schema.xml
	cp /net/work/projects/pcedt-coref/lrec_2016/orig_data/schema/adata_eng_schema.xml $@

##################################################################################################################################
############################ COPY ALL FILES TO THE SAME DIR, CHANGE REFERENCES AND SOME MARKUP ###################################
##################################################################################################################################
ORIG_DIR=$(TMP_DIR)/00.original

$(ORIG_DIR)/done :
	scripts/pcedt/structure_pcedt_parts.sh ../../PEDT/data PDT-C/data/PCEDT/pml $(dir $@)
	touch $@

##################################################################################################################################
########## TRANSFORM PDT-LIKE LANGUAGE PARTS TO A SINGLE-FILE TREEX REPRESENTATION - LANGUAGES ARE SENTENCE-ALIGNED ##############
##################################################################################################################################
UNALIGNED_DIR=$(TMP_DIR)/01.treex_unaligned

$(UNALIGNED_DIR)/done : $(ORIG_DIR)/done | $(SCHEMA_DIR)
	mkdir -p $(dir $@)
	mkdir -p $(TMP_DIR)/treex_runs
	$(TREEX) \
		Read::PCEDT from='!$(dir $<)/wsj*.en.t.gz' schema_dir=$| skip_finished='{$(dir $<)/wsj(....).*}{$(dir $@)/wsj$$1.treex.gz}' \
		Write::Treex substitute='{$(dir $<)/wsj(....).*}{$(dir $@)/wsj$$1.treex.gz}'
	touch $@

##################################################################################################################################
####################################### DELETE TRACES FROM THE ENGLISH SIDE ######################################################
##################################################################################################################################
NOTRACE_DIR=$(TMP_DIR)/02.treex_notrace

$(NOTRACE_DIR)/done : $(UNALIGNED_DIR)/done | $(SCHEMA_DIR)
	mkdir -p $(dir $@)
	$(TREEX) \
		Read::Treex from='!$(UNALIGNED_DIR)/wsj*.treex.gz' skip_finished='{$(UNALIGNED_DIR)/wsj(....).treex.gz}{$(dir $@)/wsj$$1.treex.gz}' \
		Util::Eval tnode='if ($$tnode->id eq "EnglishT-wsj_0010-s18-t1") { my $$alex = $$tnode->get_lex_anode(); print STDERR $$alex->id."\n"; }' \
		A2W::EN::DeleteTracesFromAtree language=en \
		A2W::EN::DeleteTracesFromSentence language=en \
		Write::Treex substitute='{$(UNALIGNED_DIR)/wsj(....).treex.gz}{$(dir $@)/wsj$$1.treex.gz}'
	touch $@

##################################################################################################################################
########## PROJECT ANODE ALIGNMENT FROM PCEDT 2.0 TO NEW PCEDT; FOR NEW TOKENS, ALIGNMNENT COMES FROM FAST_ALIGN  ################
##################################################################################################################################
ALIGNED_A_DIR=$(TMP_DIR)/03.treex_aligned_a

PCEDT20COREF=/net/data/pcedt2.0-coref/data

$(ALIGNED_A_DIR) :
	mkdir $@

#-----------------------------------------------------------------------------------------------------
#    1. print tokenized sentences of both sides of both the old and the new corpus
#-----------------------------------------------------------------------------------------------------

$(ALIGNED_A_DIR)/pcedt2.0coref_forms.%.txt : | $(ALIGNED_A_DIR)
	$(TREEX) \
		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
		Write::AttributeSentences to=- language=$* layer=a attributes='form' separator=' ' sent_sep='\n' \
	> $@
$(ALIGNED_A_DIR)/pcedt4pdtc_forms.%.txt : | $(ALIGNED_A_DIR)
	$(TREEX) \
		Read::Treex from='!$(NOTRACE_DIR)/wsj*.treex.gz' \
		Write::AttributeSentences to=- language=$* layer=a attributes='form' separator=' ' sent_sep='\n' skip_nodes='defined $$_->tag && $$_->tag eq "-NONE-"' \
	> $@

#-----------------------------------------------------------------------------------------------------
#    2. extract alignment links from PCEDT 2.0 Core
#-----------------------------------------------------------------------------------------------------

$(ALIGNED_A_DIR)/pcedt2.0coref.align.txt : | $(ALIGNED_A_DIR)
	$(TREEX) \
		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
		PDTC::AlignLinksPrinter to=- language=en print_idx=1 \
	> $@

#-----------------------------------------------------------------------------------------------------
#    3. extract auxiliary alignment from the new PCEDT data using Fast Align
#-----------------------------------------------------------------------------------------------------

$(ALIGNED_A_DIR)/pcedt4pdtc.for_fastalign.txt : | $(ALIGNED_A_DIR)
	$(TREEX) \
		Read::Treex from='!$(NOTRACE_DIR)/wsj*.treex.gz' \
		PDTC::PrintForFastAlign \
	> $@
$(ALIGNED_A_DIR)/pcedt4pdtc.lemma.for_fastalign.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.for_fastalign.txt
	cat $< | perl -ne 'chomp $$_; my ($$en, $$cs) = split / \|\|\| /, $$_; print $$en."\n";' | \
		python fast_align_models/lemmatize_corpus.py -l en > $@.en
	cat $< | perl -ne 'chomp $$_; my ($$en, $$cs) = split / \|\|\| /, $$_; print $$cs."\n";' | \
		python fast_align_models/lemmatize_corpus.py -l cs > $@.cs
	paste $@.en $@.cs | sed 's/\t/ ||| /' > $@
	rm $@.en $@.cs
$(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.for_fastalign.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.lemma.for_fastalign.txt
	cat $< | perl -e 'binmode STDIN, ":utf8"; binmode STDOUT, ":utf8"; while (<STDIN>) { my $$line = lc($$_); print $$line; }' > $@

FAST_ALIGN_DIR=fast_align_models

$(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.gdfa.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.for_fastalign.txt
	$(FAST_ALIGN_DIR)/fast_align/build/force_align.py \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.fwd.params \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.fwd.err \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.rev.params \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.rev.err \
			< $< > $@

$(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.int.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.for_fastalign.txt
	$(FAST_ALIGN_DIR)/fast_align/build/force_align.py \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.fwd.params \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.fwd.err \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.rev.params \
		$(FAST_ALIGN_DIR)/models/czeng20.en-cs.lemma_lc.I10.rev.err \
		intersect \
			< $< > $@

$(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.int_gdfa.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.int.txt $(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.gdfa.txt
	paste -d' ' \
		<(cat $(word 1,$^) | perl -ne 'chomp $$_; print join " ", (map {$$_.":int"} split / /, $$_); print "\n";') \
		<(cat $(word 2,$^) | perl -ne 'chomp $$_; print join " ", (map {$$_.":gdfa"} split / /, $$_); print "\n";') | \
	sed 's/^ *//g' | sed 's/ *$$//g' > $@

#---------------------------------------------------------------------------------------------------------------------------------
#    4. use old alignment links, old and new tokens and the auxiliary alignment to project alignment links for the new PCEDT
#---------------------------------------------------------------------------------------------------------------------------------

$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt4pdtc_forms.en.txt
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt2.0coref_forms.en.txt 
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt2.0coref.align.txt
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt2.0coref_forms.cs.txt
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt4pdtc_forms.cs.txt
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt : $(ALIGNED_A_DIR)/pcedt4pdtc.lemma_lc.I10.fastalign.int_gdfa.txt
$(ALIGNED_A_DIR)/pcedt4pdtc.align.txt :
	paste $^ | python scripts/pcedt/map_aligns.py > $@

#---------------------------------------------------------------------------------------------------------------------------------
#    5. import of the projected alignment to the Treex documents of PDT-C PCEDT
#---------------------------------------------------------------------------------------------------------------------------------

$(ALIGNED_A_DIR)/pcedt4pdtc.sentid.txt :
	$(TREEX) \
		Read::Treex from='!$(NOTRACE_DIR)/wsj*.treex.gz' \
		Util::Eval bundle='print $$bundle->get_document->loaded_from."-".$$bundle->id."\n";' \
	> $@

# a "-"-delimited string of names of alignment types
TYPESTR=int.gdfa-g_gdfa-g_int.gdfa-f_gdfa-f

$(ALIGNED_A_DIR)/pcedt4pdtc.align.to_import.tsv : $(ALIGNED_A_DIR)/pcedt4pdtc.align.txt $(ALIGNED_A_DIR)/pcedt4pdtc.sentid.txt
	cat $(word 1,$^) | python scripts/pcedt/column_aligns.py $(TYPESTR) | paste $(word 2,$^) - > $@

$(ALIGNED_A_DIR)/done : $(ALIGNED_A_DIR)/pcedt4pdtc.align.to_import.tsv
	$(TREEX) \
		Read::Treex from='!$(NOTRACE_DIR)/wsj*.treex.gz' \
		Align::A::InsertAlignmentFromFile language=en selector= to_language=cs to_selector= \
        	from=$< inputcols=$(TYPESTR) \
		Write::Treex path=$(dir $@)
	touch $@

##################################################################################################################################
#################### PROJECTING ALIGNMENT TO THE T-LAYER + RULE_BASED ALIGNMENT ON GENERATED NODES  ##############################
##################################################################################################################################
ALIGNED_T_DIR=$(TMP_DIR)/04.treex_aligned_t

$(ALIGNED_T_DIR) :
	mkdir $@

$(ALIGNED_T_DIR)/done : | $(ALIGNED_T_DIR)
	$(TREEX) \
		Read::Treex from='!$(ALIGNED_A_DIR)/wsj*.treex.gz' \
		Align::T::PCEDTAlignment language=en to_language=cs \
		Write::Treex path=$(dir $@)
	touch $@
		#Align::T::CopyAlignmentFromAlayer language=en to_language=cs del_prev_align=0 \
		#Align::T::AlignGeneratedNodes language=en to_language=cs monolingual=0 \

##################################################################################################################################
#################### PROJECTING ALIGNMENT TO THE T-LAYER + RULE_BASED ALIGNMENT ON GENERATED NODES  ##############################
##################################################################################################################################
ALIGNED_COREFSUP_T_DIR=$(TMP_DIR)/05.treex_aligned_corefsup_t

$(ALIGNED_COREFSUP_T_DIR) :
	mkdir $@

$(ALIGNED_COREFSUP_T_DIR)/done : | $(ALIGNED_COREFSUP_T_DIR)
	find $(ALIGNED_T_DIR) -name 'wsj*.treex.gz' | sort | grep -v 'wsj19[01234].' | sed 's#^.*/##' | sed 's#^#$(realpath $(ALIGNED_T_DIR))/#' > $(ALIGNED_COREFSUP_T_DIR)/pcedt.notrain.list; \
	$(TREEX) \
		Read::Treex from=@$(ALIGNED_COREFSUP_T_DIR)/pcedt.notrain.list \
		Align::T::Supervised::Resolver language=en,cs align_trg_lang=en node_types=all_anaph \
		Write::Treex path=$(dir $@); \
	for i in `seq 0 9`; do \
		find $(ALIGNED_T_DIR) -name 'wsj*.treex.gz' | sort | grep "wsj19[01234]$$i" | sed 's#^.*/##' | sed 's#^#$(realpath $(ALIGNED_T_DIR))/#' > $(ALIGNED_COREFSUP_T_DIR)/pcedt.wsj1900-49.fold_$$i.list; \
		en_model=data/models/align/supervised/wsj1900-49_folds/en_cs.all_anaph.fold_$$i.ref.model; \
		cs_model=data/models/align/supervised/wsj1900-49_folds/cs_en.all_anaph.fold_$$i.ref.model; \
		$(TREEX_NOLRC) \
			Read::Treex from=@$(ALIGNED_COREFSUP_T_DIR)/pcedt.wsj1900-49.fold_$$i.list \
			Align::T::Supervised::Resolver language=en,cs align_trg_lang=en model_path="$$en_model,$$cs_model" node_types=all_anaph \
			Write::Treex path=$(dir $@); \
	done; \
	touch $@

##################################################################################################################################
############################# DIAGNOSTICS OF T-NODES IN THE OLD AND THE NEW PCEDT  ###############################################
##################################################################################################################################
DIAG_DIR=$(TMP_DIR)/diag

$(DIAG_DIR) :
	mkdir $@

#---------------------------------------------------------------------------------------------------------------------------------
#    1. is the "tag" attribute set for each a-node?
#---------------------------------------------------------------------------------------------------------------------------------

$(DIAG_DIR)/pcedt2.0coref_notag_anodes.%.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
		Util::Eval anode='if (!defined $$anode->tag) { print $$anode->get_address . "\n"; }' \
	> $@

$(DIAG_DIR)/pcedt4pdtc_notag_anodes.%.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(NOTRACE_DIR)/wsj*.treex.gz' \
		Util::Eval anode='if (!defined $$anode->tag) { print $$anode->get_address . "\n"; }' \
	> $@

$(DIAG_DIR)/pcedt4pdtc_withtraces_notag_anodes.%.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(UNALIGNED_DIR)/wsj*.treex.gz' \
		Util::Eval anode='if (!defined $$anode->tag) { print $$anode->get_address . "\n"; }' \
	> $@

$(DIAG_DIR)/pcedt4pdtc_original_notag_anodes_info.en.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::PCEDT from='!$(ORIG_DIR)/wsj*.en.t.gz' schema_dir=$(SCHEMA_DIR) \
		Util::Eval language=en atree='my @anodes = $$atree->get_descendants({ordered => 1}); if (my @notag_anodes = grep {!defined $$_->tag} @anodes) { foreach my $$notag_anode (@notag_anodes) { my $$sentstr = join " ", map {$$_ == $$notag_anode ? "<".$$_->form.">" : $$_->form} @anodes; my $$addr = $$notag_anode->get_address; $$addr =~ s/^.*\///; print join "\t", ($$addr, $$sentstr, $$notag_anode->get_zone()->sentence); print "\n"; } }' \
	> $@

#---------------------------------------------------------------------------------------------------------------------------------
#    2. print alignments on a- and  t-layer to compare the original and the new version
#---------------------------------------------------------------------------------------------------------------------------------

# some parts of the diagnostics require the following tools:
# shuffle blocks of lines using a given delimiter
SHUFFLE_CMD=shuffle
# pretty-print aligned t-trees from multiple zones
TTREES_CMD=ttrees

$(DIAG_DIR)/pcedt4pdtc_taligns.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(ALIGNED_COREFSUP_T_DIR)/wsj*.treex.gz' \
		PDTC::AlignLinksPrinter to=- language=en layer=t \
	> $@

$(DIAG_DIR)/pcedt2.0coref_taligns.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
		PDTC::AlignLinksPrinter to=- language=en layer=t \
	> $@
	sed -i 's/^wsj_/wsj/' $@

$(DIAG_DIR)/pcedt4pdtc_aaligns.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(ALIGNED_COREFSUP_T_DIR)/wsj*.treex.gz' \
		PDTC::AlignLinksPrinter to=- language=en layer=a \
	> $@

$(DIAG_DIR)/pcedt2.0coref_aaligns.txt : | $(DIAG_DIR)
	$(TREEX) \
		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
		PDTC::AlignLinksPrinter to=- language=en layer=a \
	> $@
	sed -i 's/^wsj_/wsj/' $@

CHANGES_TO_INSPECT_COUNT=100

$(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.diff : $(DIAG_DIR)/pcedt2.0coref_taligns.txt $(DIAG_DIR)/pcedt4pdtc_taligns.txt | $(DIAG_DIR)
	diff $(word 1,$^) $(word 2,$^) | sed 's/^\([0-9]\)/\n\1/' | $(SHUFFLE_CMD) --random_seed=1986 --separator="\n\n" | \
		perl -e 'my $$elc = 0; while (<STDIN>) { chomp $$_; if ($$_ =~ /^$$/) { $$elc++; } print $$_."\n"; if ($$elc >= $$ARGV[0]) {exit;} }' $(CHANGES_TO_INSPECT_COUNT) > $@

$(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.orig.list : $(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.diff
	cat $< | grep -A1 '^[0-9]' | grep "wsj" | cut -f2 | sed 's/^\(EnglishT-wsj_\(\(..\)..\)-s\([0-9]\+\).*\)$$/\3\/wsj_\2.treex.gz##\4.\1/' | sed 's|^|$(PCEDT20COREF)/|' > $@

$(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.new.list : $(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.diff
	cat $< | grep -A1 '^[0-9]' | grep "wsj" | cut -f2 | sed 's/^\(EnglishT-wsj_\(....\)-s\([0-9]\+\).*\)$$/wsj\2.treex.gz##\3.\1/' | sed 's|^|$(ALIGNED_COREFSUP_T_DIR)/|' > $@

$(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.ttrees : $(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.orig.list $(DIAG_DIR)/pcedt.taligns.$(CHANGES_TO_INSPECT_COUNT)_random_changes.new.list | $(DIAG_DIR)
	paste $^ | head | while read line; do \
		$(TTREES_CMD) <(echo "$$line" | sed 's/\t/\n/') zones=en,cs; \
		perl -e 'print "\n".("#"x200)."\n\n";'; \
	done > $@

#$(DIAG_DIR)/pcedt2.0coref_tforms.%.txt : | $(DIAG_DIR)
#	$(TREEX) \
#		Read::Treex from='!$(PCEDT20COREF)/*/wsj_*.treex.gz' \
#		Write::AttributeSentences to=- language=$* layer=t attributes='id,t_lemma' separator='\n' attr_sep='\t' sent_sep='\n\n' \
#	> $@
#$(DIAG_DIR)/pcedt4pdtc_tforms.%.txt : | $(DIAG_DIR)
#	$(TREEX) \
#		Read::Treex from='!$(ALIGNED_A_DIR)/wsj*.treex.gz' \
#		Write::AttributeSentences to=- language=$* layer=t attributes='id,t_lemma' separator='\n' attr_sep='\t' sent_sep='\n\n' \
#	> $@

