#!btred -Te sentmod2
# -*- mode: cperl; encoding: utf-8 -*-
use warnings;
use strict;
use utf8;

my %FUNCTOR;
@FUNCTOR{qw{ PRED DENOM PARTL VOCAT PAR ID }} = ();

sub sentmod2 {
    my %expect;
    my $aroot = (PML_T::GetANodes($root))[0];

    for my $anode ($aroot->descendants) {
        my $lemma = $anode->attr('m/lemma');
        if ('?' eq $lemma) {
            ++$expect{inter}
        } elsif ('!' eq $lemma) {
            ++$expect{imper_excl};
        } elsif ($lemma =~ /^(?:kéž$|nechť-)/
                 || $lemma =~ /^ať-/ && 'AuxZ' eq $anode->{afun}
        ) {
            ++$expect{desid};
        } elsif ($anode->attr('m/tag') =~ /^Vi/) {
            ++$expect{imper};
        } elsif ('.' eq $lemma && 'AuxK' eq $anode->{afun}) {
            ++$expect{enunc};
        }
    }

    my %found;
    for my $node ($root->descendants) {
        if ($node->{sentmod}) {
            ++$found{ $node->{sentmod} };

            if (! exists $FUNCTOR{ $node->{functor} }) {
                if (! $node->{is_dsp_root}) {
                    if ($node->{is_member}) {
                        my $top = $node->parent;
                        while ($top->{is_member}
                               && 'coap' eq $top->{nodetype}
                               && ! $top->{is_dsp_root}
                           ) {
                            $top = $top->parent;
                        }
                        if (! $top->{is_dsp_root}
                            || 'coap' ne $top->{nodetype}
                        ) {
                            print "Misplaced sentmod\t";
                            FPosition($node);
                        }
                    } else {
                        print "Misplaced sentmod\t";
                        FPosition($node);
                    }

                }
                if ($node->{nodetype} eq 'coap') {
                    print "Misplaced sentmod\t";
                    FPosition($node);
                }
            }
        }

        if (exists $FUNCTOR{ $node->{functor} } || $node->{is_dsp_root}) {
            if ('coap' eq $node->{nodetype}) {
                my @ch = PML_T::ExpandCoord($node);
                for my $no_sentmod (grep ! $_->{sentmod}, @ch) {
                    print "Missing sentmod\t";
                    FPosition($no_sentmod);
                }
            } elsif (! $node->{sentmod}) {
                print "Missing sentmod\t";
                FPosition($node);
            }
        }
    }

    if (! keys %found && $root->descendants) {
        print "No sentmod anywhere\t";
        FPosition($root);
    }

    for my $f (keys %found) {
        if ($f =~ /^(?:imper|excl)$/) {
            next if grep $_, @expect{qw{ imper excl imper_excl }};
        }
        if (! exists $expect{$f}) {
            print "Unexpected $f\t";
            FPosition($root);
        }
    }
    for my $e (keys %expect) {
        next if 'imper_excl' eq $e
             && (exists $found{imper}
                 || exists $found{excl});

        if (! exists $found{$e}) {
            print "Missing $e\t";
            FPosition($root);
        }
    }
}
